#include <stdio.h>

void main(void) 
{

/*
//이항연산자 중 관계연산자
	printf("%d\n", 3<4);		//3이 4보다 작은지 비교
	printf("%d\n", 3<-4);	
	printf("%d\n", 3==4);	//둘이 같은지 비교
	printf("%d\n", 3!=4);	//둘이 다른지 비교
*/

/*
//삼항연산자(조건연산자 라고도 부른다)   (조건)?(참일때 실행할 것):(거짓일때 실행할 것)
	int a, b, max;
	printf("정수 1 : ");
	scanf("%d", &a);
	printf("정수 2 : ");
	scanf("%d", &b);

	max = (a>b)?a:b;		//()는 굳이 없어도 ㄱㅊ

	printf("max : %d\n",max);
*/

/*
	int a, b, max;
	printf("정수 1 : ");
	scanf("%d", &a);
	printf("정수 2 : ");
	scanf("%d", &b);

	(a>b)?printf("앞의 수가 최대\n"):printf("뒤의 수가 최대\n");		//이렇게하면 두 수가 같을때 비교가 안된다

	max = (a>b)?a:b;
	printf("max : %d\n",max);
*/

/*
	int a, b, max;
	printf("정수 1 : ");
	scanf("%d", &a);
	printf("정수 2 : ");
	scanf("%d", &b);

//	(a>b)?printf("앞의 수가 최대\n"):(a==b)?printf("두 수는 동일\n"):printf("뒤의 수가 최대\n");		//거짓일때 해야할 것을 또 삼항연산자를 넣어버린다
	(a>b)?printf("앞의 수가 최대\n"):(a<b)?printf("뒤의 수가 최대\n"):printf("두 수는 동일\n");
	max = (a>b)?a:b;
	printf("max : %d\n",max);
*/

/*
//몇월인지 입력 받아서, 상반기/하반기 출력하기
	int month;
	printf("지금이 몇월? : ");
	scanf("%d", &month);
	(month<7)?printf("상반기"):printf("하반기");
//	(month<7)?puts("상반기"):puts("하반기");
*/

/*
//abc 세개의 정수를 입력받아 최댓값 찾기
	int a, b, c, max;
	printf("정수 1 : ");
	scanf("%d", &a);
	printf("정수 2 : ");
	scanf("%d", &b);
	printf("정수 3 : ");
	scanf("%d", &c);

	max = (a>b)?(a>c?a:c):(b>c?b:c);		//조건연산자 내부에 조건연산자를 또 사용
	printf("max : %d\n",max);
*/
/*
//논리연산자 
//AND(&&),	OR(||),	NOT(!) 

	printf("%d\n", 7&13);		// 7을 이진법으로 나타내면 0111, 
	//&는 비트연산자			//               13은 1101, 
							//          두개 곱하면 0101 = 5
	
	printf("%d\n", 7&&13);		// 7은 참이니까 1, 13도 1, 1 AND 1 하면 1
	
	printf("%d\n", 7|13);		// 0111, 1101 두개 or 하면 1111 = 15

	printf("%d\n", 7||13);		// 
*/

/*
//비트연산자 : 전부 int 타입이다(4바이트 = 32비트)
// &,		|,		~(NOT),		^(XOR)[두개 같으면 0, 다르면 1],		x>>n(shift)[x나누기 2^n만큼 된다],		x<<n(shift)[x곱하기 2^n만큼 된다](Overflow 생길수 있다)

	printf("%d\n", 2^3);			// 010 ^ 011 = 001 = 1

	printf("%d\n", 7^13);		// 0111 ^ 1101 = 1010 = 10

	printf("%d\n", ~13);			// 1101 => 0010 이게 아니라 0000....01101 => 1111....10010 이 된다 (int형은 32비트니까)
							// 13 + ~13 하면 11111.....111 이다 이건 -1 이니까 ~13 = -14이다.

	printf("%d\n", 8>>1);		// 8을 오른쪽으로 1만큼 이동시켜라
							// 1000 => 0100 이 되니까 답은 4

	printf("%d\n", 8>>2);		// 1000 => 0010 이 되니까 답은 2

	printf("%d\n", 8>>3);		// 1000 => 0001 이 되니까 답은 1

	printf("%d\n", 7>>1);		// 0111 => 0011 이 되고 나머지는 버려져서 답은 3

// 1101101001을 16으로 나눈 몫과 나머지를 비트연산자를 이용해 구하라
// >>4해서 뒤에 네칸 버리고 남은게 몫, 떨어져 나간게 나머지

// 0101.....11 << 1 하면 101......110
// 양수가 음수가 되었다 : Overflow
*/



}
