#include <stdio.h>
int length_str(const char *str);
char* copy_str(char *str1, const char *str2);
int compare_str(const char *str1, const char *str2);
char* concat_str(char *str1, const char *str2);

void main(void)
{
	char str1[100];
	char str2[100];
	char str3[100];
/*
	int a = 3;
	if(a>0) return;		//이렇게 해놓으면 뒤에 있는 문장이 아무것도 실행이 안된다.
					//만약에 main문 앞에 int가 있다면 return 0; 
					//이런식으로 값을 적어줘야한다.(아무거나)
					//즉, 함수를 종료시키고 싶을때
*/
	printf("문장 1 :");
	scanf("%s", str1);
	printf("문장 2 :");
	scanf("%s", str2);
	puts("");

	printf("[length_str() 테스트] 문장1의 길이 : %d\n", length_str(str1) );
	printf("[copy_str() 테스트] 문장3에 문장1을 복사 : %s\n", copy_str(str3, str1) );
	printf("[concat_str() 테스트] 문장3에 문장2를 연결 : %s\n", concat_str(str3, str2) );
	printf("[compare_str() 테스트] 문장1과 문장2를 비교 : %d\n", compare_str(str1, str2) );
}

int length_str(const char *str)
{
	int i;
	int length = 0;
/*
	for(i=0; str[i] != 0; i++)		//str[i] == '\0' 이렇게 해도 된다(문자열의 0)
		length++;
*/	
	while(*str++ )		//우선순위가 ++이 더 높기 때문에 굳이 (str++)안해줘도 ㄱㅊ
		length++;

	return length;
}

char* copy_str(char *str1, const char *str2)
{
	int i;
	char* p = str1;
/*
	for(i=0; str2[i] != NULL; i++)		//이렇게 하면 NULL은 복사가 안되기 때문에 str1의 마지막 NULL은 직접 넣어줘야한다.
		str1[i] = str2[i];	

	str1[i] = NULL;
*/

/*
	for(i=0; i<=length_str(str2); i++)		//등호를 넣는 이유는 NULL까지 복사해주기 위해서
		str1[i] = str2[i];
*/

	while(*str2)	//str2 = "abcd";
	{
		*str1++ = *str2++;			//배열의 성분 표현방법 5번째를 잘 이해해야 한다.
								//근데 이렇게 하면 마지막에 NULL 문자가 없다
	}
	*str1 = '\0';

//	return str1;			//이렇게되면 str1이 가리키는 곳이 마지막에서 ++되어서 결과가 안나온다(NULL이후의 주소)
	return p;				//그러니 첫번째 주소를 p라는 곳에 따로 대피시켜서 불러오자
}

char* concat_str(char *str1, const char *str2)
{
	//str1의 마지막의 NULL이 str2의 첫번째 성분으로 바뀌어야 한다.
	int i;
	int len1 = length_str(str1);
	int len2 = length_str(str2);
	for(i=0; i<=len2; i++)
		str1[i+len1] = str2[i];
	
	return str1;
}

int compare_str(const char *str1, const char *str2)		//앞에는 str1을 변경해야했지만, 이번엔 그냥 비교만하는거니까 둘다 const붙이자
{
	int i;
	for(i=0; str1[i] != 0; i++)		//여기서 중간에 str2[i] != 0으로 해도 노상관
	{
		if(str1[i] > str2[i])
			return 1;
		else if(str1[i] < str2[i])
			return -1;
	}
	//이렇게 반복문을 돌고 나왔다 는건 
	// 1. 두 문자열이 동일하다
	// 2. str2가 더 길다	 : abc, abcdef		//이 두가지 경우 중 하나다

	if(str2[i] != NULL) 
		return -1;

	return 0;
}

